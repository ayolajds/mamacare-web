{
  "version": 3,
  "sources": ["src/app/shared/services/profesional.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface Professional {\r\n  _id: string;\r\n  name: string;\r\n  email: string;\r\n  specialty: string;\r\n  phone?: string;\r\n  avatar?: string;\r\n  isActive: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface ProfessionalStats {\r\n  citasHoy: number;\r\n  citasPendientes: number;\r\n  citasEstaSemana: number;\r\n  pacientesActivos: number;\r\n  citasCompletadasMes: number;\r\n  tasaAsistencia: number;\r\n}\r\n\r\n// ‚úÖ INTERFAZ CORREGIDA - COINCIDE CON EL BACKEND\r\nexport interface Appointment {\r\n  _id: string;\r\n  title: string;\r\n  date: string;\r\n  duration: number;\r\n  status: 'scheduled' | 'confirmed' | 'in_progress' | 'completed' | 'cancelled' | 'rescheduled' | 'no_show';\r\n  type: string;\r\n  notes?: string;\r\n  reason?: string;\r\n  symptoms?: string;\r\n  priority?: string;\r\n  meetingPlatform?: string;\r\n  meetingUrl?: string;\r\n  patientId: {\r\n    _id: string;\r\n    name: string;\r\n    lastName: string;\r\n    email: string;\r\n    phone?: string;\r\n  };\r\n  professionalId: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  endDate?: string;\r\n}\r\n\r\n// ‚úÖ INTERFAZ PAGINADA CORREGIDA\r\nexport interface PaginatedResponse<T> {\r\n  docs: T[];\r\n  totalDocs: number;\r\n  limit: number;\r\n  totalPages: number;\r\n  page: number;\r\n  pagingCounter: number;\r\n  hasPrevPage: boolean;\r\n  hasNextPage: boolean;\r\n  prevPage: number | null;\r\n  nextPage: number | null;\r\n}\r\n\r\n// ‚úÖ INTERFAZ DE RESPUESTA CORREGIDA\r\nexport interface AppointmentsResponse {\r\n  success: boolean;\r\n  data: PaginatedResponse<Appointment>;\r\n  message?: string;\r\n}\r\n\r\nexport interface StatsResponse {\r\n  success: boolean;\r\n  data: ProfessionalStats;\r\n}\r\n\r\nexport interface ProfessionalResponse {\r\n  success: boolean;\r\n  data: Professional;\r\n}\r\n\r\n// ‚úÖ INTERFAZ PARA RESPUESTA DE PACIENTES\r\nexport interface PatientsResponse {\r\n  success: boolean;\r\n  data: PaginatedResponse<any>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfessionalService {\r\n  private http = inject(HttpClient);\r\n  private baseUrl = `${environment.apiUrl}/professional`;\r\n\r\n  // üë§ Obtener perfil del profesional\r\n  getProfessionalProfile(): Observable<ProfessionalResponse> {\r\n    console.log('üë§ Obteniendo perfil del profesional...');\r\n    return this.http.get<ProfessionalResponse>(`${this.baseUrl}/profile`);\r\n  }\r\n\r\n  // üìä Obtener estad√≠sticas del dashboard profesional\r\n  getStats(): Observable<StatsResponse> {\r\n    console.log('üìä Obteniendo estad√≠sticas del profesional...');\r\n    return this.http.get<StatsResponse>(`${this.baseUrl}/stats`);\r\n  }\r\n\r\n  // üìÖ Obtener citas del profesional (con filtros)\r\n  getAppointments(params: {\r\n    page?: number;\r\n    limit?: number;\r\n    status?: string;\r\n    dateFrom?: string;\r\n    dateTo?: string;\r\n  } = {}): Observable<AppointmentsResponse> {\r\n    \r\n    let httpParams = new HttpParams();\r\n    \r\n    if (params.page) httpParams = httpParams.set('page', params.page.toString());\r\n    if (params.limit) httpParams = httpParams.set('limit', params.limit.toString());\r\n    if (params.status) httpParams = httpParams.set('status', params.status);\r\n    if (params.dateFrom) httpParams = httpParams.set('dateFrom', params.dateFrom);\r\n    if (params.dateTo) httpParams = httpParams.set('dateTo', params.dateTo);\r\n\r\n    console.log('üìÖ Obteniendo citas del profesional:', params);\r\n    \r\n    return this.http.get<AppointmentsResponse>(`${this.baseUrl}/appointments`, { \r\n      params: httpParams \r\n    });\r\n  }\r\n\r\n  // ‚úÖ M√âTODO HELPER PARA EXTRAER CITAS - ACTUALIZADO\r\n  extractAppointments(response: AppointmentsResponse): Appointment[] {\r\n    if (!response.success) {\r\n      return [];\r\n    }\r\n    \r\n    // Usar la estructura corregida con PaginatedResponse\r\n    return response.data?.docs || [];\r\n  }\r\n\r\n  // ‚ûï Crear nueva cita\r\n  createAppointment(appointmentData: any): Observable<{success: boolean; data: Appointment}> {\r\n    console.log('‚ûï Creando nueva cita:', appointmentData);\r\n    return this.http.post<{success: boolean; data: Appointment}>(\r\n      `${this.baseUrl}/appointments`,\r\n      appointmentData\r\n    );\r\n  }\r\n\r\n  // ‚úèÔ∏è Actualizar cita\r\n  updateAppointment(appointmentId: string, updateData: any): Observable<{success: boolean; data: Appointment}> {\r\n    console.log('‚úèÔ∏è Actualizando cita:', { appointmentId, updateData });\r\n    return this.http.put<{success: boolean; data: Appointment}>(\r\n      `${this.baseUrl}/appointments/${appointmentId}`,\r\n      updateData\r\n    );\r\n  }\r\n\r\n  // üóëÔ∏è Cancelar cita\r\n  cancelAppointment(appointmentId: string): Observable<{success: boolean; message: string}> {\r\n    console.log('üóëÔ∏è Cancelando cita:', appointmentId);\r\n    return this.http.patch<{success: boolean; message: string}>(\r\n      `${this.baseUrl}/appointments/${appointmentId}/cancel`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  // üë• Obtener pacientes del profesional\r\n  getPatients(params: {\r\n    page?: number;\r\n    limit?: number;\r\n    search?: string;\r\n  } = {}): Observable<PatientsResponse> {\r\n    \r\n    let httpParams = new HttpParams();\r\n    \r\n    if (params.page) httpParams = httpParams.set('page', params.page.toString());\r\n    if (params.limit) httpParams = httpParams.set('limit', params.limit.toString());\r\n    if (params.search) httpParams = httpParams.set('search', params.search);\r\n\r\n    // ‚úÖ AGREGAR TIMESTAMP PARA EVITAR CACH√â\r\n    httpParams = httpParams.set('_t', Date.now().toString());\r\n\r\n    console.log('üë• Obteniendo pacientes del profesional:', params);\r\n    \r\n    return this.http.get<PatientsResponse>(\r\n      `${this.baseUrl}/patients`,\r\n      { params: httpParams }\r\n    );\r\n  }\r\n\r\n  // üîÑ Actualizar estado de cita\r\n  updateAppointmentStatus(appointmentId: string, status: string): Observable<{success: boolean; data: Appointment}> {\r\n    console.log('üîÑ Actualizando estado de cita:', { appointmentId, status });\r\n    return this.http.patch<{success: boolean; data: Appointment}>(\r\n      `${this.baseUrl}/appointments/${appointmentId}/status`,\r\n      { status }\r\n    );\r\n  }\r\n\r\n  // üìù Actualizar notas de cita\r\n  updateAppointmentNotes(appointmentId: string, notes: string): Observable<{success: boolean; data: Appointment}> {\r\n    console.log('üìù Actualizando notas de cita:', { appointmentId, notes });\r\n    return this.http.patch<{success: boolean; data: Appointment}>(\r\n      `${this.baseUrl}/appointments/${appointmentId}/notes`,\r\n      { notes }\r\n    );\r\n  }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;AA6FM,IAAO,sBAAP,MAAO,qBAAmB;EACtB,OAAO,OAAO,UAAU;EACxB,UAAU,GAAG,YAAY,MAAM;;EAGvC,yBAAsB;AACpB,YAAQ,IAAI,gDAAyC;AACrD,WAAO,KAAK,KAAK,IAA0B,GAAG,KAAK,OAAO,UAAU;EACtE;;EAGA,WAAQ;AACN,YAAQ,IAAI,yDAA+C;AAC3D,WAAO,KAAK,KAAK,IAAmB,GAAG,KAAK,OAAO,QAAQ;EAC7D;;EAGA,gBAAgB,SAMZ,CAAA,GAAE;AAEJ,QAAI,aAAa,IAAI,WAAU;AAE/B,QAAI,OAAO;AAAM,mBAAa,WAAW,IAAI,QAAQ,OAAO,KAAK,SAAQ,CAAE;AAC3E,QAAI,OAAO;AAAO,mBAAa,WAAW,IAAI,SAAS,OAAO,MAAM,SAAQ,CAAE;AAC9E,QAAI,OAAO;AAAQ,mBAAa,WAAW,IAAI,UAAU,OAAO,MAAM;AACtE,QAAI,OAAO;AAAU,mBAAa,WAAW,IAAI,YAAY,OAAO,QAAQ;AAC5E,QAAI,OAAO;AAAQ,mBAAa,WAAW,IAAI,UAAU,OAAO,MAAM;AAEtE,YAAQ,IAAI,+CAAwC,MAAM;AAE1D,WAAO,KAAK,KAAK,IAA0B,GAAG,KAAK,OAAO,iBAAiB;MACzE,QAAQ;KACT;EACH;;EAGA,oBAAoB,UAA8B;AAChD,QAAI,CAAC,SAAS,SAAS;AACrB,aAAO,CAAA;IACT;AAGA,WAAO,SAAS,MAAM,QAAQ,CAAA;EAChC;;EAGA,kBAAkB,iBAAoB;AACpC,YAAQ,IAAI,8BAAyB,eAAe;AACpD,WAAO,KAAK,KAAK,KACf,GAAG,KAAK,OAAO,iBACf,eAAe;EAEnB;;EAGA,kBAAkB,eAAuB,YAAe;AACtD,YAAQ,IAAI,mCAAyB,EAAE,eAAe,WAAU,CAAE;AAClE,WAAO,KAAK,KAAK,IACf,GAAG,KAAK,OAAO,iBAAiB,aAAa,IAC7C,UAAU;EAEd;;EAGA,kBAAkB,eAAqB;AACrC,YAAQ,IAAI,oCAAwB,aAAa;AACjD,WAAO,KAAK,KAAK,MACf,GAAG,KAAK,OAAO,iBAAiB,aAAa,WAC7C,CAAA,CAAE;EAEN;;EAGA,YAAY,SAIR,CAAA,GAAE;AAEJ,QAAI,aAAa,IAAI,WAAU;AAE/B,QAAI,OAAO;AAAM,mBAAa,WAAW,IAAI,QAAQ,OAAO,KAAK,SAAQ,CAAE;AAC3E,QAAI,OAAO;AAAO,mBAAa,WAAW,IAAI,SAAS,OAAO,MAAM,SAAQ,CAAE;AAC9E,QAAI,OAAO;AAAQ,mBAAa,WAAW,IAAI,UAAU,OAAO,MAAM;AAGtE,iBAAa,WAAW,IAAI,MAAM,KAAK,IAAG,EAAG,SAAQ,CAAE;AAEvD,YAAQ,IAAI,mDAA4C,MAAM;AAE9D,WAAO,KAAK,KAAK,IACf,GAAG,KAAK,OAAO,aACf,EAAE,QAAQ,WAAU,CAAE;EAE1B;;EAGA,wBAAwB,eAAuB,QAAc;AAC3D,YAAQ,IAAI,0CAAmC,EAAE,eAAe,OAAM,CAAE;AACxE,WAAO,KAAK,KAAK,MACf,GAAG,KAAK,OAAO,iBAAiB,aAAa,WAC7C,EAAE,OAAM,CAAE;EAEd;;EAGA,uBAAuB,eAAuB,OAAa;AACzD,YAAQ,IAAI,yCAAkC,EAAE,eAAe,MAAK,CAAE;AACtE,WAAO,KAAK,KAAK,MACf,GAAG,KAAK,OAAO,iBAAiB,aAAa,UAC7C,EAAE,MAAK,CAAE;EAEb;;qCArHW,sBAAmB;EAAA;4EAAnB,sBAAmB,SAAnB,qBAAmB,WAAA,YAFlB,OAAM,CAAA;;;sEAEP,qBAAmB,CAAA;UAH/B;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
