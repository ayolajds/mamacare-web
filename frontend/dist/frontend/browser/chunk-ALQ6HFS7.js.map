{
  "version": 3,
  "sources": ["src/app/shared/services/admin.ts", "src/app/admin/users/user-list/user-list.ts", "src/app/admin/users/user-list/user-list.html"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface DashboardStats {\r\n  totalUsers: number;\r\n  activeUsers: number;\r\n  inactiveUsers: number;\r\n  professionalsCount: number;\r\n  patientsCount: number;\r\n  volunteersCount: number;\r\n  newUsersThisMonth: number;\r\n  userDistribution: {\r\n    pacientes: number;\r\n    profesionales: number;\r\n    voluntarios: number;\r\n  };\r\n}\r\n\r\nexport interface UserListResponse {\r\n  success: boolean;\r\n  data: {\r\n    users: any[];\r\n    pagination: {\r\n      currentPage: number;\r\n      totalPages: number;\r\n      totalUsers: number;\r\n      hasNext: boolean;\r\n      hasPrev: boolean;\r\n    };\r\n  };\r\n}\r\n\r\nexport interface UserUpdateResponse {\r\n  success: boolean;\r\n  message: string;\r\n  data: {\r\n    id: string;\r\n    isActive?: boolean;\r\n    role?: string;\r\n    email: string;\r\n  };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminService {\r\n  private http = inject(HttpClient);\r\n  private baseUrl = `${environment.apiUrl}/admin`;\r\n\r\n  // ðŸ“Š Obtener estadÃ­sticas del dashboard\r\n  getDashboardStats(): Observable<{ success: boolean; data: DashboardStats }> {\r\n    console.log('ðŸ“Š Obteniendo estadÃ­sticas del dashboard...');\r\n    return this.http.get<{ success: boolean; data: DashboardStats }>(\r\n      `${this.baseUrl}/dashboard/stats`\r\n    );\r\n  }\r\n\r\n  // ðŸ‘¥ Obtener lista de usuarios (con paginaciÃ³n y filtros) - CORREGIDO\r\n  getUsers(page: number = 1, limit: number = 10, search: string = '', role: string = '', status: string = ''): Observable<UserListResponse> {\r\n    let params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('limit', limit.toString());\r\n\r\n    if (search) params = params.set('search', search);\r\n    if (role) params = params.set('role', role);\r\n    if (status) params = params.set('status', status); // âœ… AGREGADO: ParÃ¡metro status\r\n\r\n    console.log('ðŸ‘¥ Obteniendo lista de usuarios:', { page, limit, search, role, status });\r\n    \r\n    return this.http.get<UserListResponse>(`${this.baseUrl}/users`, { params });\r\n  }\r\n\r\n  // ðŸ”„ Activar/desactivar usuario\r\n  toggleUserStatus(userId: string): Observable<UserUpdateResponse> {\r\n    console.log('ðŸ”„ Cambiando estado del usuario:', userId);\r\n    return this.http.patch<UserUpdateResponse>(\r\n      `${this.baseUrl}/users/${userId}/toggle`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  // ðŸŽ­ Cambiar rol de usuario\r\n  updateUserRole(userId: string, newRole: string): Observable<UserUpdateResponse> {\r\n    console.log('ðŸŽ­ Cambiando rol del usuario:', { userId, newRole });\r\n    return this.http.patch<UserUpdateResponse>(\r\n      `${this.baseUrl}/users/${userId}/role`,\r\n      { role: newRole }\r\n    );\r\n  }\r\n}", "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { AdminService } from '../../../shared/services/admin';\r\n\r\ninterface User {\r\n  _id: string;\r\n  name: string;\r\n  lastName: string;\r\n  email: string;\r\n  role: string;\r\n  isActive: boolean;\r\n  createdAt: string;\r\n  lastLogin?: string;\r\n}\r\n\r\ninterface Pagination {\r\n  currentPage: number;\r\n  totalPages: number;\r\n  totalUsers: number;\r\n  hasNext: boolean;\r\n  hasPrev: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-user-list',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule, FormsModule],\r\n  templateUrl: './user-list.html',\r\n  styleUrls: ['./user-list.scss']\r\n})\r\nexport class UserList implements OnInit, OnDestroy {\r\n  private subscriptions = new Subscription();\r\n\r\n  users: User[] = [];\r\n  pagination: Pagination = {\r\n    currentPage: 1,\r\n    totalPages: 0,\r\n    totalUsers: 0,\r\n    hasNext: false,\r\n    hasPrev: false\r\n  };\r\n\r\n  // Filtros y bÃºsqueda\r\n  searchTerm: string = '';\r\n  roleFilter: string = '';\r\n  statusFilter: string = '';\r\n  \r\n  // Estados\r\n  isLoading = true;\r\n  error: string | null = null;\r\n  isUpdating: { [key: string]: boolean } = {};\r\n\r\n  // Roles disponibles (sin admin)\r\n  roles = ['paciente', 'profesional', 'voluntario'];\r\n  itemsPerPage = 10;\r\n\r\n  constructor(private adminService: AdminService) {}\r\n\r\n  ngOnInit() {\r\n    this.loadUsers();\r\n  }\r\n\r\n  loadUsers(page: number = 1) {\r\n    this.isLoading = true;\r\n    this.error = null;\r\n\r\n    const usersSub = this.adminService.getUsers(\r\n      page,\r\n      this.itemsPerPage,\r\n      this.searchTerm,\r\n      this.roleFilter,\r\n      this.statusFilter // âœ… AGREGADO: Enviar statusFilter al backend\r\n    ).subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          // Filtrar usuarios que no sean admin y normalizar\r\n          this.users = response.data.users\r\n            .filter((user: any) => user.role !== 'admin')\r\n            .map(user => this.normalizeUser(user));\r\n          this.pagination = response.data.pagination;\r\n        }\r\n        this.isLoading = false;\r\n      },\r\n      error: (error) => {\r\n        this.error = 'Error al cargar los usuarios';\r\n        this.isLoading = false;\r\n        console.error('Error loading users:', error);\r\n      }\r\n    });\r\n\r\n    this.subscriptions.add(usersSub);\r\n  }\r\n\r\n  // Normalizar usuario para asegurar que todas las propiedades tengan valores\r\n  private normalizeUser(userData: any): User {\r\n    return {\r\n      _id: userData._id || '',\r\n      name: userData.name || 'Sin nombre',\r\n      lastName: userData.lastName || '',\r\n      email: userData.email || '',\r\n      role: userData.role || 'paciente',\r\n      isActive: Boolean(userData.isActive),\r\n      createdAt: userData.createdAt || new Date().toISOString(),\r\n      lastLogin: userData.lastLogin\r\n    };\r\n  }\r\n\r\n  // BÃºsqueda y filtros\r\n  onSearch() {\r\n    this.pagination.currentPage = 1;\r\n    this.loadUsers();\r\n  }\r\n\r\n  onFilterChange() {\r\n    this.pagination.currentPage = 1;\r\n    this.loadUsers();\r\n  }\r\n\r\n  clearFilters() {\r\n    this.searchTerm = '';\r\n    this.roleFilter = '';\r\n    this.statusFilter = '';\r\n    this.pagination.currentPage = 1;\r\n    this.loadUsers();\r\n  }\r\n\r\n  // PaginaciÃ³n\r\n  nextPage() {\r\n    if (this.pagination.hasNext) {\r\n      this.loadUsers(this.pagination.currentPage + 1);\r\n    }\r\n  }\r\n\r\n  prevPage() {\r\n    if (this.pagination.hasPrev) {\r\n      this.loadUsers(this.pagination.currentPage - 1);\r\n    }\r\n  }\r\n\r\n  goToPage(page: number) {\r\n    if (page >= 1 && page <= this.pagination.totalPages) {\r\n      this.loadUsers(page);\r\n    }\r\n  }\r\n\r\n  // GestiÃ³n de usuarios\r\n  toggleUserStatus(user: User) {\r\n    this.isUpdating[user._id] = true;\r\n\r\n    const toggleSub = this.adminService.toggleUserStatus(user._id).subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          // ActualizaciÃ³n inmediata en el frontend\r\n          user.isActive = Boolean(response.data.isActive);\r\n        }\r\n        this.isUpdating[user._id] = false;\r\n      },\r\n      error: (error) => {\r\n        this.error = 'Error al cambiar el estado del usuario';\r\n        this.isUpdating[user._id] = false;\r\n        console.error('Error toggling user status:', error);\r\n      }\r\n    });\r\n\r\n    this.subscriptions.add(toggleSub);\r\n  }\r\n\r\n  updateUserRole(user: User, newRole: string) {\r\n    if (user.role === newRole) return;\r\n\r\n    this.isUpdating[user._id] = true;\r\n\r\n    const roleSub = this.adminService.updateUserRole(user._id, newRole).subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          // ActualizaciÃ³n inmediata en el frontend\r\n          user.role = response.data.role || user.role;\r\n        }\r\n        this.isUpdating[user._id] = false;\r\n      },\r\n      error: (error) => {\r\n        this.error = 'Error al actualizar el rol del usuario';\r\n        this.isUpdating[user._id] = false;\r\n        console.error('Error updating user role:', error);\r\n      }\r\n    });\r\n\r\n    this.subscriptions.add(roleSub);\r\n  }\r\n\r\n  // MÃ©todo para manejar cambio de rol desde el template\r\n  onRoleChange(user: User, event: Event) {\r\n    const target = event.target as HTMLSelectElement;\r\n    if (target && target.value) {\r\n      this.updateUserRole(user, target.value);\r\n    }\r\n  }\r\n\r\n  // Utilidades\r\n  getUserInitials(user: User): string {\r\n    const first = user.name.charAt(0);\r\n    const last = user.lastName.charAt(0);\r\n    return (first + last).toUpperCase() || 'U';\r\n  }\r\n\r\n  getRoleBadgeClass(role: string): string {\r\n    const roleClasses: { [key: string]: string } = {\r\n      paciente: 'badge-paciente',\r\n      profesional: 'badge-profesional',\r\n      voluntario: 'badge-voluntario'\r\n    };\r\n    return roleClasses[role] || 'badge-default';\r\n  }\r\n\r\n  getRoleDisplayName(role: string): string {\r\n    const roleNames: { [key: string]: string } = {\r\n      paciente: 'Paciente',\r\n      profesional: 'Profesional',\r\n      voluntario: 'Voluntario'\r\n    };\r\n    return roleNames[role] || role;\r\n  }\r\n\r\n  getStatusBadgeClass(isActive: boolean): string {\r\n    return isActive ? 'badge-active' : 'badge-inactive';\r\n  }\r\n\r\n  formatDate(dateString: string): string {\r\n    return new Date(dateString).toLocaleDateString('es-ES');\r\n  }\r\n\r\n  getPageNumbers(): number[] {\r\n    const pages: number[] = [];\r\n    const totalPages = this.pagination.totalPages;\r\n    const currentPage = this.pagination.currentPage;\r\n    \r\n    // Mostrar mÃ¡ximo 5 pÃ¡ginas alrededor de la actual\r\n    let start = Math.max(1, currentPage - 2);\r\n    let end = Math.min(totalPages, currentPage + 2);\r\n    \r\n    // Ajustar si estamos cerca del inicio o final\r\n    if (currentPage <= 3) {\r\n      end = Math.min(5, totalPages);\r\n    } else if (currentPage >= totalPages - 2) {\r\n      start = Math.max(totalPages - 4, 1);\r\n    }\r\n    \r\n    for (let i = start; i <= end; i++) {\r\n      pages.push(i);\r\n    }\r\n    \r\n    return pages;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}", "<div class=\"user-management\">\r\n  <!-- Header -->\r\n  <div class=\"management-header\">\r\n    <div class=\"header-content\">\r\n      <h1 class=\"management-title\">GestiÃ³n de Usuarios</h1>\r\n      <p class=\"management-subtitle\">Administra usuarios, roles y estados de cuenta</p>\r\n    </div>\r\n    <div class=\"header-actions\">\r\n      <button class=\"btn-refresh\" (click)=\"loadUsers(pagination.currentPage)\" [disabled]=\"isLoading\">\r\n        <svg class=\"refresh-icon\" [class.loading]=\"isLoading\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\r\n        </svg>\r\n        {{ isLoading ? 'Actualizando...' : 'Actualizar' }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Filtros y BÃºsqueda - Mejor organizados -->\r\n  <div class=\"filters-section\">\r\n    <div class=\"filters-main\">\r\n      <div class=\"search-box\">\r\n        <div class=\"search-input-wrapper\">\r\n          <svg class=\"search-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\r\n          </svg>\r\n          <input \r\n            type=\"text\" \r\n            [(ngModel)]=\"searchTerm\" \r\n            (input)=\"onSearch()\"\r\n            placeholder=\"Buscar por nombre, apellido o email...\" \r\n            class=\"search-input\"\r\n          >\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"filter-row\">\r\n        <select [(ngModel)]=\"roleFilter\" (change)=\"onFilterChange()\" class=\"filter-select\">\r\n          <option value=\"\">Todos los roles</option>\r\n          <option value=\"paciente\">Pacientes</option>\r\n          <option value=\"profesional\">Profesionales</option>\r\n          <option value=\"voluntario\">Voluntarios</option>\r\n        </select>\r\n\r\n        <select [(ngModel)]=\"statusFilter\" (change)=\"onFilterChange()\" class=\"filter-select\">\r\n          <option value=\"\">Todos los estados</option>\r\n          <option value=\"active\">Activos</option>\r\n          <option value=\"inactive\">Inactivos</option>\r\n        </select>\r\n\r\n        <button (click)=\"clearFilters()\" class=\"btn-clear-filters\">\r\n          <svg class=\"clear-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n          </svg>\r\n          Limpiar\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Estados de carga y error -->\r\n  <div *ngIf=\"isLoading\" class=\"loading-state\">\r\n    <div class=\"loading-spinner\"></div>\r\n    <p>Cargando usuarios...</p>\r\n  </div>\r\n\r\n  <div *ngIf=\"error && !isLoading\" class=\"error-state\">\r\n    <div class=\"error-icon\">\r\n      <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n      </svg>\r\n    </div>\r\n    <h3>Error al cargar los usuarios</h3>\r\n    <p>{{ error }}</p>\r\n    <button class=\"btn-retry\" (click)=\"loadUsers(pagination.currentPage)\">Reintentar</button>\r\n  </div>\r\n\r\n  <!-- Tabla de usuarios -->\r\n  <div *ngIf=\"!isLoading && !error\" class=\"users-container\">\r\n    <!-- Resumen -->\r\n    <div class=\"summary-bar\">\r\n      <span class=\"summary-text\">\r\n        Mostrando {{ users.length }} de {{ pagination.totalUsers }} usuarios\r\n        <span *ngIf=\"searchTerm || roleFilter || statusFilter\" class=\"filtered-indicator\">\r\n          (filtrados)\r\n        </span>\r\n      </span>\r\n    </div>\r\n\r\n    <!-- Tabla -->\r\n    <div class=\"table-container\">\r\n      <table class=\"users-table\">\r\n        <thead>\r\n          <tr>\r\n            <th class=\"user-col\">Usuario</th>\r\n            <th class=\"role-col\">Rol</th>\r\n            <th class=\"status-col\">Estado</th>\r\n            <th class=\"date-col\">Fecha Registro</th>\r\n            <th class=\"date-col\">Ãšltimo Acceso</th>\r\n            <th class=\"actions-col\">Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let user of users\" class=\"user-row\">\r\n            <!-- InformaciÃ³n del usuario -->\r\n            <td class=\"user-info-cell\">\r\n              <div class=\"user-avatar\">\r\n                {{ getUserInitials(user) }}\r\n              </div>\r\n              <div class=\"user-details\">\r\n                <span class=\"user-name\">{{ user.name || 'Sin nombre' }} {{ user.lastName || '' }}</span>\r\n                <span class=\"user-email\">{{ user.email }}</span>\r\n              </div>\r\n            </td>\r\n\r\n            <!-- Rol con colores -->\r\n            <td class=\"role-cell\">\r\n              <div class=\"role-display\">\r\n                <span class=\"role-badge\" [class]=\"getRoleBadgeClass(user.role)\">\r\n                  {{ getRoleDisplayName(user.role) }}\r\n                </span>\r\n                <select \r\n                  [value]=\"user.role\" \r\n                  (change)=\"onRoleChange(user, $event)\"\r\n                  [disabled]=\"isUpdating[user._id]\"\r\n                  class=\"role-select\"\r\n                >\r\n                  <option *ngFor=\"let role of roles\" [value]=\"role\">\r\n                    {{ getRoleDisplayName(role) }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </td>\r\n\r\n            <!-- Estado -->\r\n            <td class=\"status-cell\">\r\n              <span class=\"status-badge\" [class]=\"getStatusBadgeClass(user.isActive)\">\r\n                {{ user.isActive ? 'Activo' : 'Inactivo' }}\r\n              </span>\r\n            </td>\r\n\r\n            <!-- Fecha Registro -->\r\n            <td class=\"date-cell\">\r\n              <div class=\"date-info\">\r\n                <span class=\"date-main\">{{ formatDate(user.createdAt) }}</span>\r\n              </div>\r\n            </td>\r\n\r\n            <!-- Ãšltimo Acceso -->\r\n            <td class=\"date-cell\">\r\n              <div class=\"date-info\">\r\n                <span class=\"date-main\" *ngIf=\"user.lastLogin; else neverLoggedIn\">\r\n                  {{ formatDate(user.lastLogin) }}\r\n                </span>\r\n                <ng-template #neverLoggedIn>\r\n                  <span class=\"date-secondary\">Nunca</span>\r\n                </ng-template>\r\n              </div>\r\n            </td>\r\n\r\n            <!-- Acciones -->\r\n            <td class=\"actions-cell\">\r\n              <div class=\"action-buttons\">\r\n                <button \r\n                  (click)=\"toggleUserStatus(user)\"\r\n                  [disabled]=\"isUpdating[user._id]\"\r\n                  [class]=\"user.isActive ? 'btn-deactivate' : 'btn-activate'\"\r\n                  class=\"btn-status\"\r\n                >\r\n                  <span *ngIf=\"!isUpdating[user._id]\">\r\n                    {{ user.isActive ? 'Desactivar' : 'Activar' }}\r\n                  </span>\r\n                  <span *ngIf=\"isUpdating[user._id]\" class=\"loading-text\">\r\n                    <svg class=\"loading-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 2v4m0 12v4m8-10h-4M6 12H2\"></path>\r\n                    </svg>\r\n                    Procesando...\r\n                  </span>\r\n                </button>\r\n\r\n                <a [routerLink]=\"['/admin/users/user-edit', user._id]\" class=\"btn-edit\">\r\n                  <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"></path>\r\n                  </svg>\r\n                  Editar\r\n                </a>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n\r\n          <!-- Estado vacÃ­o -->\r\n          <tr *ngIf=\"users.length === 0\">\r\n            <td colspan=\"6\" class=\"empty-state\">\r\n              <div class=\"empty-content\">\r\n                <svg class=\"empty-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                </svg>\r\n                <h3>No se encontraron usuarios</h3>\r\n                <p *ngIf=\"searchTerm || roleFilter || statusFilter\">\r\n                  Intenta ajustar los filtros de bÃºsqueda\r\n                </p>\r\n                <p *ngIf=\"!searchTerm && !roleFilter && !statusFilter\">\r\n                  No hay usuarios registrados en el sistema\r\n                </p>\r\n                <button *ngIf=\"searchTerm || roleFilter || statusFilter\" \r\n                        (click)=\"clearFilters()\" \r\n                        class=\"btn-clear-filters\">\r\n                  Limpiar filtros\r\n                </button>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    <!-- PaginaciÃ³n -->\r\n    <div *ngIf=\"pagination.totalPages > 1\" class=\"pagination-container\">\r\n      <div class=\"pagination-info\">\r\n        PÃ¡gina {{ pagination.currentPage }} de {{ pagination.totalPages }}\r\n      </div>\r\n      \r\n      <div class=\"pagination-controls\">\r\n        <button \r\n          (click)=\"prevPage()\" \r\n          [disabled]=\"!pagination.hasPrev\"\r\n          class=\"pagination-btn\"\r\n        >\r\n          <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\"></path>\r\n          </svg>\r\n          Anterior\r\n        </button>\r\n\r\n        <div class=\"page-numbers\">\r\n          <button \r\n            *ngFor=\"let page of getPageNumbers()\" \r\n            (click)=\"goToPage(page)\"\r\n            [class.active]=\"page === pagination.currentPage\"\r\n            class=\"page-btn\"\r\n          >\r\n            {{ page }}\r\n          </button>\r\n        </div>\r\n\r\n        <button \r\n          (click)=\"nextPage()\" \r\n          [disabled]=\"!pagination.hasNext\"\r\n          class=\"pagination-btn\"\r\n        >\r\n          Siguiente\r\n          <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\"></path>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"],
  "mappings": "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",
  "names": []
}
