{
  "version": 3,
  "sources": ["src/app/shared/services/auth.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { delay, tap, map, catchError } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  name: string;\r\n  lastName: string;\r\n  email: string;\r\n  password: string;\r\n  phone: string;\r\n  birthDate: string;\r\n}\r\n\r\nexport interface User {\r\n  id: string;\r\n  name: string;\r\n  lastName: string;\r\n  email: string;\r\n  role?: string;\r\n  phone?: string;\r\n  birthDate?: string;\r\n  createdAt?: string;\r\n}\r\n\r\nexport interface LoginResponse {\r\n  token: string;\r\n  user: User;\r\n}\r\n\r\nexport interface UpdateProfileRequest {\r\n  name: string;\r\n  lastName: string;\r\n  phone: string;\r\n}\r\n\r\nexport interface ChangePasswordRequest {\r\n  currentPassword: string;\r\n  newPassword: string;\r\n  confirmPassword?: string;\r\n}\r\n\r\nexport interface ApiResponse<T = any> {\r\n  success: boolean;\r\n  message?: string;\r\n  user?: T;\r\n  data?: any;\r\n}\r\n\r\nexport interface ForgotPasswordResponse {\r\n  success: boolean;\r\n  message: string;\r\n  resetToken?: string;\r\n  resetURL?: string;\r\n  userEmail?: string;\r\n}\r\n\r\nexport interface VerifyTokenResponse {\r\n  message: string;\r\n  user: {\r\n    email: string;\r\n    name: string;\r\n  };\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  private http = inject(HttpClient);\r\n\r\n  private readonly MOCK = false;\r\n  private readonly BASE = `${environment.apiUrl}/auth`;\r\n  private readonly USERS_BASE = `${environment.apiUrl}/users`;\r\n  private readonly ACCESS_KEY = 'Ma´Care_access';\r\n  private readonly USER_KEY = 'Ma´Care_user';\r\n\r\n  login(payload: LoginRequest): Observable<LoginResponse> {\r\n    if (this.MOCK) {\r\n      const mock: LoginResponse = {\r\n        token: 'simulated-token',\r\n        user: {\r\n          id: '1',\r\n          name: 'Usuario',\r\n          lastName: 'Demo',\r\n          email: payload.email,\r\n          role: 'paciente',\r\n          phone: '+57 300 123 4567',\r\n          birthDate: '1990-01-01'\r\n        }\r\n      };\r\n      return of(mock).pipe(\r\n        delay(500),\r\n        tap(res => this.persist(res))\r\n      );\r\n    }\r\n\r\n    return this.http.post<LoginResponse>(`${this.BASE}/login`, payload).pipe(\r\n      tap(res => this.persist(res)),\r\n      catchError(err => throwError(() => err))\r\n    );\r\n  }\r\n\r\n  register(payload: RegisterRequest): Observable<User> {\r\n    if (this.MOCK) {\r\n      const mockUser: User = {\r\n        id: crypto.randomUUID(),\r\n        name: payload.name,\r\n        lastName: payload.lastName,\r\n        email: payload.email,\r\n        role: 'paciente',\r\n        phone: payload.phone,\r\n        birthDate: payload.birthDate\r\n      };\r\n      return of(mockUser).pipe(delay(500));\r\n    }\r\n\r\n    return this.http.post<LoginResponse>(`${this.BASE}/register`, payload).pipe(\r\n      tap(res => this.persist(res)),\r\n      map(res => res.user),\r\n      catchError(err => throwError(() => err))\r\n    );\r\n  }\r\n\r\n  updateProfile(payload: UpdateProfileRequest): Observable<ApiResponse<User>> {\r\n    if (this.MOCK) {\r\n      const updatedUser: User = {\r\n        ...this.currentUser()!,\r\n        ...payload\r\n      };\r\n      const mockResponse: ApiResponse<User> = {\r\n        success: true,\r\n        user: updatedUser\r\n      };\r\n      return of(mockResponse).pipe(\r\n        delay(500),\r\n        tap(response => {\r\n          if (response.success && response.user) {\r\n            this.updateLocalUser(response.user);\r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      Authorization: `Bearer ${this.token()}`\r\n    });\r\n\r\n    return this.http.put<ApiResponse<User>>(`${this.USERS_BASE}/profile`, payload, { headers }).pipe(\r\n      tap(response => {\r\n        if (response.success && response.user) {\r\n          this.updateLocalUser(response.user);\r\n        }\r\n      }),\r\n      catchError(err => throwError(() => err))\r\n    );\r\n  }\r\n\r\n  changePassword(payload: ChangePasswordRequest): Observable<ApiResponse> {\r\n    if (this.MOCK) {\r\n      const mockResponse: ApiResponse = {\r\n        success: true,\r\n        message: 'Contraseña actualizada correctamente'\r\n      };\r\n      return of(mockResponse).pipe(delay(500));\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      Authorization: `Bearer ${this.token()}`\r\n    });\r\n\r\n    const { confirmPassword, ...backendPayload } = payload;\r\n\r\n    return this.http.put<ApiResponse>(`${this.USERS_BASE}/change-password`, backendPayload, { headers }).pipe(\r\n      catchError(err => throwError(() => err))\r\n    );\r\n  }\r\n\r\n  me(): Observable<User | null> {\r\n    if (this.MOCK) return of(this.currentUser());\r\n\r\n    const headers = new HttpHeaders({\r\n      Authorization: `Bearer ${this.token()}`\r\n    });\r\n\r\n    return this.http.get<{ user: User }>(`${this.BASE}/me`, { headers }).pipe(\r\n      map(r => r.user),\r\n      tap(u => localStorage.setItem(this.USER_KEY, JSON.stringify(u))),\r\n      catchError(() => of(null))\r\n    );\r\n  }\r\n\r\n  // ✅ FORGOT PASSWORD - CONECTADO AL BACKEND REAL\r\n  forgotPassword(email: string): Observable<ForgotPasswordResponse> {\r\n    if (this.MOCK) {\r\n      return of({\r\n        success: true,\r\n        message: 'Si el email existe en nuestro sistema, recibirás un enlace para restablecer tu contraseña'\r\n      }).pipe(delay(1500));\r\n    }\r\n\r\n    return this.http.post<ForgotPasswordResponse>(`${this.BASE}/forgot-password`, { email })\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error en forgotPassword:', error);\r\n          return throwError(() => new Error(\r\n            error.error?.message || 'Error al enviar el correo de recuperación'\r\n          ));\r\n        })\r\n      );\r\n  }\r\n\r\n  // ✅ VERIFY RESET TOKEN - CONECTADO AL BACKEND REAL\r\n  verifyResetToken(token: string): Observable<VerifyTokenResponse> {\r\n    if (this.MOCK) {\r\n      return of({\r\n        message: 'Token válido',\r\n        user: {\r\n          email: 'test@example.com',\r\n          name: 'Usuario Test'\r\n        }\r\n      }).pipe(delay(1000));\r\n    }\r\n\r\n    return this.http.get<VerifyTokenResponse>(`${this.BASE}/verify-reset-token/${token}`)\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error en verifyResetToken:', error);\r\n          return throwError(() => new Error(\r\n            error.error?.message || 'Token inválido o expirado'\r\n          ));\r\n        })\r\n      );\r\n  }\r\n\r\n  // ✅ RESET PASSWORD - CONECTADO AL BACKEND REAL\r\n  resetPassword(token: string, newPassword: string): Observable<ApiResponse> {\r\n    if (this.MOCK) {\r\n      return of({\r\n        success: true,\r\n        message: 'Contraseña restablecida exitosamente'\r\n      }).pipe(delay(1500));\r\n    }\r\n\r\n    return this.http.post<ApiResponse>(`${this.BASE}/reset-password/${token}`, { password: newPassword })\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error en resetPassword:', error);\r\n          return throwError(() => new Error(\r\n            error.error?.message || 'Error al restablecer la contraseña'\r\n          ));\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem(this.ACCESS_KEY);\r\n    localStorage.removeItem(this.USER_KEY);\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!localStorage.getItem(this.ACCESS_KEY);\r\n  }\r\n\r\n  token(): string | null {\r\n    return localStorage.getItem(this.ACCESS_KEY);\r\n  }\r\n\r\n  currentUser(): User | null {\r\n    const raw = localStorage.getItem(this.USER_KEY);\r\n    return raw ? (JSON.parse(raw) as User) : null;\r\n  }\r\n\r\n  private updateLocalUser(updatedUser: User): void {\r\n    const currentUser = this.currentUser();\r\n    if (currentUser) {\r\n      const mergedUser = { ...currentUser, ...updatedUser };\r\n      localStorage.setItem(this.USER_KEY, JSON.stringify(mergedUser));\r\n    }\r\n  }\r\n\r\n  private persist(res: LoginResponse) {\r\n    localStorage.setItem(this.ACCESS_KEY, res.token);\r\n    localStorage.setItem(this.USER_KEY, JSON.stringify(res.user));\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
